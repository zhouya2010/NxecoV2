package com.nxecoii.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nxecoii.greendao.ScheduleData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULE_DATA".
*/
public class ScheduleDataDao extends AbstractDao<ScheduleData, Long> {

    public static final String TABLENAME = "SCHEDULE_DATA";

    /**
     * Properties of entity ScheduleData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Zone = new Property(1, Integer.class, "zone", false, "ZONE");
        public final static Property Repeat = new Property(2, Integer.class, "repeat", false, "REPEAT");
        public final static Property Interval = new Property(3, Integer.class, "interval", false, "INTERVAL");
        public final static Property TimeId = new Property(4, Integer.class, "timeId", false, "TIME_ID");
        public final static Property GroupId = new Property(5, Integer.class, "groupId", false, "GROUP_ID");
        public final static Property Lable = new Property(6, String.class, "lable", false, "LABLE");
        public final static Property Start_time = new Property(7, String.class, "start_time", false, "START_TIME");
        public final static Property IsUpload = new Property(8, Boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property Enable = new Property(9, Boolean.class, "enable", false, "ENABLE");
        public final static Property Add_time = new Property(10, java.util.Date.class, "add_time", false, "ADD_TIME");
    };


    public ScheduleDataDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ZONE\" INTEGER," + // 1: zone
                "\"REPEAT\" INTEGER," + // 2: repeat
                "\"INTERVAL\" INTEGER," + // 3: interval
                "\"TIME_ID\" INTEGER," + // 4: timeId
                "\"GROUP_ID\" INTEGER," + // 5: groupId
                "\"LABLE\" TEXT," + // 6: lable
                "\"START_TIME\" TEXT," + // 7: start_time
                "\"IS_UPLOAD\" INTEGER," + // 8: isUpload
                "\"ENABLE\" INTEGER," + // 9: enable
                "\"ADD_TIME\" INTEGER);"); // 10: add_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScheduleData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer zone = entity.getZone();
        if (zone != null) {
            stmt.bindLong(2, zone);
        }
 
        Integer repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindLong(3, repeat);
        }
 
        Integer interval = entity.getInterval();
        if (interval != null) {
            stmt.bindLong(4, interval);
        }
 
        Integer timeId = entity.getTimeId();
        if (timeId != null) {
            stmt.bindLong(5, timeId);
        }
 
        Integer groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindLong(6, groupId);
        }
 
        String lable = entity.getLable();
        if (lable != null) {
            stmt.bindString(7, lable);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(8, start_time);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(9, isUpload ? 1L: 0L);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(10, enable ? 1L: 0L);
        }
 
        java.util.Date add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindLong(11, add_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ScheduleData readEntity(Cursor cursor, int offset) {
        ScheduleData entity = new ScheduleData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // zone
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // repeat
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // interval
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // timeId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // groupId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lable
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // start_time
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isUpload
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // enable
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // add_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScheduleData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZone(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRepeat(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setInterval(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTimeId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGroupId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLable(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStart_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsUpload(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setEnable(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setAdd_time(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ScheduleData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ScheduleData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
