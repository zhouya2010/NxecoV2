package com.nxecoii.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nxecoii.greendao.WaterData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WATER_DATA".
*/
public class WaterDataDao extends AbstractDao<WaterData, Long> {

    public static final String TABLENAME = "WATER_DATA";

    /**
     * Properties of entity WaterData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Zone = new Property(1, Integer.class, "zone", false, "ZONE");
        public final static Property Adjust = new Property(2, Integer.class, "adjust", false, "ADJUST");
        public final static Property IntervalOrigin = new Property(3, Integer.class, "intervalOrigin", false, "INTERVAL_ORIGIN");
        public final static Property IntervalActual = new Property(4, Integer.class, "intervalActual", false, "INTERVAL_ACTUAL");
        public final static Property StartTimeTheory = new Property(5, Long.class, "startTimeTheory", false, "START_TIME_THEORY");
        public final static Property StartTimeActually = new Property(6, Long.class, "startTimeActually", false, "START_TIME_ACTUALLY");
        public final static Property EndTimeActually = new Property(7, Long.class, "endTimeActually", false, "END_TIME_ACTUALLY");
        public final static Property IsUpload = new Property(8, Boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property SprayType = new Property(9, Integer.class, "sprayType", false, "SPRAY_TYPE");
        public final static Property StopType = new Property(10, Integer.class, "stopType", false, "STOP_TYPE");
        public final static Property Add_time = new Property(11, java.util.Date.class, "add_time", false, "ADD_TIME");
    };


    public WaterDataDao(DaoConfig config) {
        super(config);
    }
    
    public WaterDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WATER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ZONE\" INTEGER," + // 1: zone
                "\"ADJUST\" INTEGER," + // 2: adjust
                "\"INTERVAL_ORIGIN\" INTEGER," + // 3: intervalOrigin
                "\"INTERVAL_ACTUAL\" INTEGER," + // 4: intervalActual
                "\"START_TIME_THEORY\" INTEGER," + // 5: startTimeTheory
                "\"START_TIME_ACTUALLY\" INTEGER," + // 6: startTimeActually
                "\"END_TIME_ACTUALLY\" INTEGER," + // 7: endTimeActually
                "\"IS_UPLOAD\" INTEGER," + // 8: isUpload
                "\"SPRAY_TYPE\" INTEGER," + // 9: sprayType
                "\"STOP_TYPE\" INTEGER," + // 10: stopType
                "\"ADD_TIME\" INTEGER);"); // 11: add_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WATER_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WaterData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer zone = entity.getZone();
        if (zone != null) {
            stmt.bindLong(2, zone);
        }
 
        Integer adjust = entity.getAdjust();
        if (adjust != null) {
            stmt.bindLong(3, adjust);
        }
 
        Integer intervalOrigin = entity.getIntervalOrigin();
        if (intervalOrigin != null) {
            stmt.bindLong(4, intervalOrigin);
        }
 
        Integer intervalActual = entity.getIntervalActual();
        if (intervalActual != null) {
            stmt.bindLong(5, intervalActual);
        }
 
        Long startTimeTheory = entity.getStartTimeTheory();
        if (startTimeTheory != null) {
            stmt.bindLong(6, startTimeTheory);
        }
 
        Long startTimeActually = entity.getStartTimeActually();
        if (startTimeActually != null) {
            stmt.bindLong(7, startTimeActually);
        }
 
        Long endTimeActually = entity.getEndTimeActually();
        if (endTimeActually != null) {
            stmt.bindLong(8, endTimeActually);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(9, isUpload ? 1L: 0L);
        }
 
        Integer sprayType = entity.getSprayType();
        if (sprayType != null) {
            stmt.bindLong(10, sprayType);
        }
 
        Integer stopType = entity.getStopType();
        if (stopType != null) {
            stmt.bindLong(11, stopType);
        }
 
        java.util.Date add_time = entity.getAdd_time();
        if (add_time != null) {
            stmt.bindLong(12, add_time.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WaterData readEntity(Cursor cursor, int offset) {
        WaterData entity = new WaterData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // zone
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // adjust
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // intervalOrigin
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // intervalActual
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // startTimeTheory
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // startTimeActually
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // endTimeActually
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isUpload
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // sprayType
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // stopType
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // add_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WaterData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZone(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAdjust(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIntervalOrigin(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIntervalActual(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStartTimeTheory(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStartTimeActually(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setEndTimeActually(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIsUpload(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setSprayType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setStopType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAdd_time(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WaterData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WaterData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
